name: life check
on:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - master
      - AddActions4life
jobs:
    check:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          include:
            - PRODUCT: golang
              VERSION: "1.20"
            - PRODUCT: python
              VERSION: 3.7
      steps:
      - name: Checkout from repository.
        uses: actions/checkout@v2
      - name: Check to exist the target.
        run: |
          test -f dockerfiles/${{matrix.PRODUCT}}/Dockerfile
      - name: Check a latest version.
        id: latest_env
        run: |
            curl -L -s --request GET --url https://endoflife.date/api/${{matrix.PRODUCT}}/${{matrix.VERSION}}.json --header 'Accept: application/json' > /tmp/version.json
            cat /tmp/version.json
            grep -q "latest" /tmp/version.json
            echo "Version=$(cat /tmp/version.json | jq -r '.latest')" >> "$GITHUB_OUTPUT"
            echo "Eol=$(cat /tmp/version.json | jq -r '.eol')" >> "$GITHUB_OUTPUT"
            echo "Support=$(cat /tmp/version.json | jq -r '.support')" >> "$GITHUB_OUTPUT"
      - name: Make a latest dockerfile.
        id: diff_check
        run: |
            cp dockerfiles/${{matrix.PRODUCT}}/Dockerfile /tmp/Dockerfile_bk
            sed -i 's/${{matrix.PRODUCT}}:[0-9.]*\s/${{matrix.PRODUCT}}:'${{steps.latest_env.outputs.Version}}' /' dockerfiles/${{matrix.PRODUCT}}/Dockerfile
            diff /tmp/Dockerfile_bk dockerfiles/${{matrix.PRODUCT}}/Dockerfile
        continue-on-error: true
      - name: Create a Pull Request.
        uses: peter-evans/create-pull-request@v5
        with:
          title: '[TEST] [NewVersion] ${{matrix.PRODUCT}}/${{steps.latest_env.outputs.Version}}'
          body: |
            ${{matrix.PRODUCT}}/${{steps.latest_env.outputs.Version}} is detected!
            detail >> https://endoflife.date/${{matrix.PRODUCT}}
          commit-message: "by life_pr.yml"
          branch: Update/${{matrix.PRODUCT}}/${{steps.latest_env.outputs.Version}}
        if: steps.diff_check.outcome == 'failure'
      - name: Regist status of EOL.
        id: not_eol
        run: |
            test "false" == "${{steps.env.outputs.Eol}}" && exit 0
            test "${{steps.env.outputs.Eol}}" <  $(date -u +'%Y-%m-%d')" && exit 1
        continue-on-error: true
      - name: Make a issue body.
        run: |
            mkdir -p .tmp
            echo "---" > .tmp/issue.md
            echo "title: ${{matrix.PRODUCT}}/${{matrix.VERSION}} is EOL." >> .tmp/issue.md
            echo "labels: EOL" >> .tmp/issue.md
            echo "assignees: hinoshiba" >> .tmp/issue.md
            echo "---" >> .tmp/issue.md
            echo "${{matrix.PRODUCT}}/${{matrix.VERSION}} is EOL." >> .tmp/issue.md
            echo "detail > https://endoflife.date/${{matrix.PRODUCT}}" >> .tmp/issue.md
            cat .tmp/issue.md
        if: steps.not_eol.outcome == 'failure'
      - name: Create the issue.
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          update_existing: true
          search_existing: open
          filename: .tmp/issue.md
        if: steps.not_eol.outcome == 'failure'
      - name: Regist status of Support.
        id: support
        run: |
            test "null" == "${{steps.env.outputs.Support}}" && exit 0
            test "${{steps.env.outputs.Support}}" <  $(date -u +'%Y-%m-%d')" && exit 1
        continue-on-error: true
      - name: Make a issue body.
        run: |
            mkdir -p .tmp
            echo "---" > .tmp/issue.md
            echo "title: ${{matrix.PRODUCT}}/${{matrix.VERSION}} is support out." >> .tmp/issue.md
            echo "labels: support_out" >> .tmp/issue.md
            echo "assignees: hinoshiba" >> .tmp/issue.md
            echo "---" >> .tmp/issue.md
            echo "${{matrix.PRODUCT}}/${{matrix.VERSION}} is EOL." >> .tmp/issue.md
            echo "detail > https://endoflife.date/${{matrix.PRODUCT}}" >> .tmp/issue.md
            cat .tmp/issue.md
        if: steps.support.outcome == 'failure'
      - name: Create the issue.
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          update_existing: true
          search_existing: open
          filename: .tmp/issue.md
        if: steps.support.outcome == 'failure'
