name: life check
on:
  schedule:
    - cron: "0 0 * * *"
jobs:
    check:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          include:
            - PRODUCT: golang
            - PRODUCT: python
            - PRODUCT: rust
            - PRODUCT: node
      steps:
      - name: Checkout from repository.
        uses: actions/checkout@v2
      - name: Check to exist the target.
        run: |
          test -f version/${{matrix.PRODUCT}}/strict
      - name: Check a latest version.
        id: latest_env
        run: |
            curl -L -s --request GET --url https://endoflife.date/api/${{matrix.PRODUCT}}/$(cat version/${{matrix.PRODUCT}}/major).json --header 'Accept: application/json' > /tmp/version.json
            cat /tmp/version.json
            grep -q "latest" /tmp/version.json
            echo "Version=$(cat /tmp/version.json | jq -r '.latest')" >> "$GITHUB_OUTPUT"
            echo "Eol=$(cat /tmp/version.json | jq -r '.eol')" >> "$GITHUB_OUTPUT"
            echo "Support=$(cat /tmp/version.json | jq -r '.support')" >> "$GITHUB_OUTPUT"
      - name: Update version.
        id: diff_check
        run: |
            cp version/${{matrix.PRODUCT}}/strict /tmp/strict_bk
            echo "${{steps.latest_env.outputs.Version}}" > version/${{matrix.PRODUCT}}/strict
            diff /tmp/strict_bk version/${{matrix.PRODUCT}}/strict
        continue-on-error: true
      - name: Set up Docker Buildx for build test.
        uses: docker/setup-buildx-action@v2
        if: steps.diff_check.outcome == 'failure'
      - name: Get LANG_TYPE
        id: LANG
        run: |
          echo "TYPE=$(cat dockerfiles/${{matrix.PRODUCT}}/Dockerfile | grep FROM | head -n1 | sed -n 's/^FROM \([^:]*\):.*$/\1/p')" >> "$GITHUB_OUTPUT"
          echo "TAG=$(cat dockerfiles/${{matrix.PRODUCT}}/Dockerfile | grep FROM | head -n1 | sed -n 's/^.*\${\([^}]*\)}.*$/\1/p')" >> "$GITHUB_OUTPUT"
      - name: Get Version
        id: VERSION
        run: |
          echo "TARGET=$(cat version/${{ steps.LANG.outputs.TYPE }}/${{ steps.LANG.outputs.TAG }})" >> "$GITHUB_OUTPUT"
      - name: Build test.
        uses: docker/build-push-action@v2
        with:
          context: dockerfiles/${{matrix.PRODUCT}}
          push: false
          platforms: linux/amd64,linux/arm64
          build-args: |
            ${{ steps.LANG.outputs.TAG }}=${{ steps.VERSION.outputs.TARGET }}
        if: steps.diff_check.outcome == 'failure'
      - name: Create a Pull Request.
        uses: peter-evans/create-pull-request@v5
        with:
          title: '[NewVersion] ${{matrix.PRODUCT}}/${{steps.latest_env.outputs.Version}}'
          body: |
            ${{matrix.PRODUCT}}/${{steps.latest_env.outputs.Version}} is detected!
            detail >> https://endoflife.date/${{matrix.PRODUCT}}
          commit-message: "by life_pr.yml"
          branch: Update/${{matrix.PRODUCT}}/${{steps.latest_env.outputs.Version}}
        if: steps.diff_check.outcome == 'failure'
